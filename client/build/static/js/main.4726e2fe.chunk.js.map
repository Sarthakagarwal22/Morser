{"version":3,"sources":["components/main.jsx","components/sender.jsx","components/receiver.jsx","index.jsx"],"names":["Main","roomId","enterRoom","role","id","window","open","location","href","handleKeyUp","event","fn","keyCode","preventDefault","Navbar","bg","variant","Container","Brand","style","marginLeft","alt","src","width","height","className","Row","alignItems","Col","Card","margin","backgroundColor","Body","Title","Text","Button","onClick","parseInt","Date","getTime","placeholder","type","ref","input","onKeyUp","value","marginTop","Component","Sender","socket","io","videoEnded","index","state","text","alerts","handleErrors","alert","setState","showAlert","Object","keys","map","key","Alert","onClose","dismissible","componentDidMount","emit","props","on","err","setInterval","https","get","handleTextChange","target","prevState","handleOnClick","morseCode","morjs","encode","mode","message","origin","this","onChange","e","Receiver","showText","msg","toPlay","playMorseCode","navigator","vibrate","code","T","arrayToPlay","i","length","char","charAt","push","search","replace","path","pathname","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4726e2fe.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Card, Button, Container, Row, Col, Navbar } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nclass Main extends Component {\n    roomId = '';\n\n    enterRoom = (role, id) => {\n        window.open(`${window.location.href}${role}?id=${id}`, '_self');\n    }\n\n    handleKeyUp = (event, fn) => {\n        if (event.keyCode === 13) {\n            event.preventDefault();\n            fn();\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <Navbar bg=\"primary\" variant=\"dark\">\n                    <Container >\n                        <Navbar.Brand style={{ marginLeft: '20px' }}>\n                            <img\n                                alt=\"\"\n                                src=\"../../favicon.ico\"\n                                width=\"30\"\n                                height=\"30\"\n                                className=\"d-inline-block align-top flip-vertical\"\n                            />{'  '}\n                        Morser\n                        </Navbar.Brand>\n                    </Container>\n                </Navbar>\n                <Container className=\"align-items-center\">\n                        <h2>\n                            Overview\n                        </h2>\n                        <p>\n                            Morser is a platform that lets you send morse code to any one in the world.\n                        </p>\n                        <h3>\n                            How to use:\n                        </h3>\n                        <p>\n                            Create a room with some room id. Once you enter the room, share that room ID (or the full URL) with your friends.\n                            <br />\n                            One becomes a sender and other becomes a receiver. The sender can write text normally, it is converted into morse code by the website itself and sent to the receiver\n                        </p>\n                    <Row style={{\n                        alignItems: 'center'\n                    }}>\n                        <Col>\n                            <Card style={{ width: '18rem', margin: '4px', backgroundColor: '#f06292' }}>\n                                <Card.Body>\n                                    <Card.Title>Create Room as Sender</Card.Title>\n                                    <Card.Text>Click below if you do not have a room number and would like to create a new room.</Card.Text>\n                                    <Button onClick={() => this.enterRoom('sender', parseInt((new Date()).getTime() / 1000))} style={{ backgroundColor: '#ba2d65', 'borderColor': '#ba2d65' }}>Let's go</Button >\n                                </Card.Body>\n                            </Card>\n                        </Col>\n                        <Col>\n                            <Card style={{ width: '18rem', margin: '4px', backgroundColor: '#f06292' }}>\n                                <Card.Body>\n                                    <Card.Title>Join Room as sender</Card.Title>\n                                    <Card.Text>Enter your Room number below</Card.Text>\n                                    <input placeholder='Room #' type='text' ref={input => { this.roomId = input }} onKeyUp={event => this.handleKeyUp(event, () => this.enterRoom(this.roomId.value))} />\n                                    <Button onClick={() => this.enterRoom('sender', this.roomId.value)} style={{ backgroundColor: '#ba2d65', 'borderColor': '#ba2d65', marginTop: '17px' }}>Let's go</Button>\n                                </Card.Body>\n                            </Card>\n                        </Col>\n                    </Row>\n                    <Row style={{\n                        alignItems: 'center'\n                    }}>\n                       <Col>\n                            <Card style={{ width: '18rem', margin: '4px', backgroundColor: '#f06292' }}>\n                                <Card.Body>\n                                    <Card.Title>Create Room as receiver</Card.Title>\n                                    <Card.Text>Click below if you do not have a room number and would like to create a new room.</Card.Text>\n                                    <Button onClick={() => this.enterRoom('receiver', parseInt((new Date()).getTime() / 1000))} style={{ backgroundColor: '#ba2d65', 'borderColor': '#ba2d65' }}>Let's go</Button >\n                                </Card.Body>\n                            </Card>\n                        </Col>\n                        <Col>\n                            <Card style={{ width: '18rem', margin: '4px', backgroundColor: '#f06292' }}>\n                                <Card.Body>\n                                    <Card.Title>Join Room as receiver</Card.Title>\n                                    <Card.Text>Enter your Room number below</Card.Text>\n                                    <input placeholder='Room #' type='text' ref={input => { this.roomId = input }} onKeyUp={event => this.handleKeyUp(event, () => this.enterRoom(this.roomId.value))} />\n                                    <Button onClick={() => this.enterRoom('receiver', this.roomId.value)} style={{ backgroundColor: '#ba2d65', 'borderColor': '#ba2d65', marginTop: '17px' }}>Let's go</Button>\n                                </Card.Body>\n                            </Card>\n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n        )\n    }\n}\n\nexport default Main;","import React, { Component } from 'react';\nimport { Alert } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport io from 'socket.io-client';\nimport https from 'https';\nimport morjs from 'morjs';\n\nclass Sender extends Component {\n    socket = io();\n    videoEnded = true;\n    index = -1;\n    state = {\n        text:\"\",\n        alerts:[]\n    }\n\n    handleErrors = () => {\n        let alert = this.state.alerts;\n        alert['sInactive'] = 'Server went inactive. Please refresh page.';\n        this.setState({ alerts: alert });\n    }\n\n    showAlert = () => {\n        return Object.keys(this.state.alerts).map(key => {\n            const value = this.state.alerts[key];\n            return (\n                < Alert variant='danger' id={key} onClose={() => {\n                    let alert = this.state.alerts;\n                    delete alert[key];\n                    this.setState({ alerts: alert })\n                }} dismissible>\n                    {value}\n                </Alert >\n            )\n        })\n    };\n\n    componentDidMount = () => {\n        this.socket.emit('register', { id: this.props.roomId });\n        this.socket.on('connect_error', err => this.handleErrors());\n        this.socket.on('connect_failed', err => this.handleErrors());\n        this.socket.on('disconnect', err => this.handleErrors());\n        setInterval(() => https.get(`stayUp`), 60 * 1000);\n    }\n\n    render() {\n        return (\n            <div>\n                <button onClick={() => window.location = `${window.location.origin}/receiver?id=${this.props.roomId}`}>Become Receiver</button>\n                <br/><br/>\n                Enter the Morse Code you would like to send\n                <br></br><br></br>\n                <input type=\"text\" value={this.state.text} onChange={(e) => this.handleTextChange(e)}/>\n                <button onClick={() => this.handleOnClick()}>Send Morse Code</button>\n            </div>\n        );\n    }\n\n    handleTextChange = event => {\n        const value = event.target.value\n        this.setState((prevState) => {\n            return {...prevState, text: value}\n        })\n    }\n\n    handleOnClick = () => {\n        const morseCode = morjs.encode(this.state.text, {mode: 'simple'});\n        this.socket.emit('sendCode', {message: morseCode, id: this.props.roomId})\n    }\n}\n\nexport default Sender;","import React, { Component } from 'react';\nimport { Alert } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport io from 'socket.io-client';\nimport https from 'https';\n\nclass Receiver extends Component {\n    socket = io();\n    videoEnded = true;\n    index = -1;\n    state = {\n        showText: false,\n        alerts:[]\n    }\n\n    handleErrors = () => {\n        let alert = this.state.alerts;\n        alert['sInactive'] = 'Server went inactive. Please refresh page.';\n        this.setState({ alerts: alert });\n    }\n\n    showAlert = () => {\n        return Object.keys(this.state.alerts).map(key => {\n            const value = this.state.alerts[key];\n            return (\n                < Alert variant='danger' id={key} onClose={() => {\n                    let alert = this.state.alerts;\n                    delete alert[key];\n                    this.setState({ alerts: alert })\n                }} dismissible>\n                    {value}\n                </Alert >\n            )\n        })\n    };\n\n    componentDidMount = () => {\n        this.socket.emit('register', { id: this.props.roomId });\n        this.socket.on('sendMorseCode', msg => {\n            var toPlay = this.playMorseCode(msg);\n            window.navigator.vibrate(toPlay);\n        })\n        this.socket.on('connect_error', err => this.handleErrors());\n        this.socket.on('connect_failed', err => this.handleErrors());\n        this.socket.on('disconnect', err => this.handleErrors());\n        setInterval(() => https.get(`stayUp`), 60 * 1000);\n    }\n\n    render() {\n        return (\n            <div>\n                <button onClick={() => window.location = `${window.location.origin}/sender?id=${this.props.roomId}`}>Become Sender</button> <br/><br/>\n                {!this.state.showText && <p><button onClick={()=>this.setState({showText: true})}>Click here</button> to start receiving morse code</p> }\n                {this.state.showText && \"As Soon as the sender will send a morse code, you will get the vibrations\"}\n            </div>\n        );\n    }\n\n    playMorseCode = (code) => {\n        var T = 200;\n        var arrayToPlay = [];\n    \n        for(let i=0; i<code.length ; i++) {\n            var char = code.charAt(i);\n            // we first check if the code we received is a \".\"\n            if (char === '.') {\n                // add vibrate of 1T\n                arrayToPlay.push(T);\n            } else if (char === '-') {\n                // add vibrate of 3T\n                arrayToPlay.push(3*T);\n            } else if (char === ' ') {\n                // add pause of 3T\n                arrayToPlay.push(3*T);\n            } else if (char === '|') {\n                arrayToPlay.push(7*T);\n            }\n    \n            // we might need to add a spacer if the next character is either a \".\" or a \"-\"\n            // and the current char is either a \".\" or a \"-\"\n            if (((i + 1) < code.length)\n                && (code.charAt(i) === \".\" || code.charAt(i) === \"-\")\n                && (code.charAt(i+1) === \".\" || code.charAt(i+1) === \"-\")) {\n                arrayToPlay.push(T);\n            }\n        }\n    \n        return arrayToPlay;\n    }\n}\n\nexport default Receiver;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Main from './components/main'\nimport Sender from './components/sender';\nimport Receiver from './components/receiver';\n\nconst roomId = window.location.search.replace(\"?id=\", '');\n\nconst path = window.location.pathname\n\nif (roomId) {\n    if(path === \"/sender\")\n    ReactDOM.render(<Sender roomId={roomId} />, document.getElementById('root'));\n    \n    if(path === \"/receiver\")\n    ReactDOM.render(<Receiver roomId={roomId} />, document.getElementById('root'));\n}\nelse ReactDOM.render(<Main />, document.getElementById('root'));"],"sourceRoot":""}